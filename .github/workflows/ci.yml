name: CI/CD Deploy GrdMad

on:
  push:
    branches: [ homol ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Define Image Tag (short SHA)
        id: meta
        run: echo "tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            VITE_COMMIT_SHA=${{ steps.meta.outputs.tag }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/grdmad:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/grdmad:${{ steps.meta.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-server:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        run: |
          test -n "${{ secrets.SERVER_HOST }}" || (echo "::error::Missing SERVER_HOST" && exit 1)
          test -n "${{ secrets.SERVER_USER }}" || (echo "::error::Missing SERVER_USER" && exit 1)
          test -n "${{ secrets.SERVER_SSH_KEY }}" || (echo "::error::Missing SERVER_SSH_KEY" && exit 1)

      - name: Write SSH key file
        shell: bash
        run: |
          umask 077
          cat > id_key <<'EOF'
          ${{ secrets.SERVER_SSH_KEY }}
          EOF
          chmod 600 id_key

      - name: Deploy with SSH (docker stack deploy sem volumes)
        uses: appleboy/ssh-action@v1
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key_path: ./id_key
          port: ${{ secrets.SERVER_PORT || '22' }}
          debug: true
          envs: IMAGE_TAG,DOCKERHUB_USERNAME
          script: |
            set -Eeuo pipefail
            set -x

            # (Opcional) Login se o repositório do Docker Hub for privado
            if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin || true
            fi

            # Garante diretório do stack e o arquivo docker-stack.yml atualizado no servidor
            mkdir -p /var/www/grdmad-stack
            cd /var/www/grdmad-stack

            # Se você mantém o docker-stack.yml no repo, copie-o para o servidor.
            # Caso esteja em outro lugar, adapte este bloco para puxar do Git ou scp.
            cat > docker-stack.yml <<'YAML'
            version: "3.8"
            services:
              grdmad_site:
                image: ${DOCKERHUB_USERNAME}/grdmad:${IMAGE_TAG}
                ports:
                  - "80:80"
                deploy:
                  replicas: 1
                  update_config:
                    order: start-first
                    parallelism: 1
                    delay: 5s
                  restart_policy:
                    condition: any
                    delay: 5s
                    max_attempts: 3
                    window: 30s
            YAML

            # Faz o deploy com substituição de variáveis do ambiente (IMAGE_TAG/DOCKERHUB_USERNAME)
            export IMAGE_TAG DOCKERHUB_USERNAME
            docker pull "${DOCKERHUB_USERNAME}/grdmad:${IMAGE_TAG}" || true

            # Se já existe "grdmad" como stack, sobrescreve
            docker stack deploy \
              --with-registry-auth \
              -c docker-stack.yml \
              grdmad

            # Observabilidade rápida
            docker stack ps grdmad || true
            docker service ls | grep grdmad || true

            # Limpeza de imagens antigas (opcional)
            docker image prune -f || true
            docker builder prune -f || true

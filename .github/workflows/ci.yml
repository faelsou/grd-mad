name: CI/CD Deploy grd-mad

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Define Image Tag
        id: meta
        run: echo "tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/grdmad:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/grdmad:${{ steps.meta.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-server:
    needs: build-and-push
    runs-on: ubuntu-latest
    # Se os secrets estão em um Environment (ex.: production), descomente:
    # environment: production
    steps:
      # Validação rápida para falhar cedo se faltar secret
      - name: Check required secrets
        run: |
          test -n "${{ secrets.SERVER_HOST }}" || (echo "::error::Missing SERVER_HOST" && exit 1)
          test -n "${{ secrets.SERVER_USER }}" || (echo "::error::Missing SERVER_USER" && exit 1)
          test -n "${{ secrets.SERVER_SSH_KEY }}" || (echo "::error::Missing SERVER_SSH_KEY" && exit 1)

      - name: Deploy with SSH
        uses: appleboy/ssh-action@v1
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # opcional, se imagem privada
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || '22' }}
          script_stop: true
          debug: true
          # As envs acima serão exportadas no host remoto
          envs: IMAGE_TAG,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN
          script: |
            set -Eeuo pipefail

            cd /var/www/grd-mad

            # (Opcional) login se o repo do Docker Hub for privado
            if [ -n "${DOCKERHUB_TOKEN:-}" ]; then
              echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin || true
            fi

            # Garanta que o compose referencia ${DOCKERHUB_USERNAME}/grdmad:${IMAGE_TAG}
            grep -q 'grdmad:${IMAGE_TAG}' docker-compose.yml

            # Puxa a imagem alvo (útil antes do deploy, principalmente em Swarm)
            docker pull "${DOCKERHUB_USERNAME}/grdmad:${IMAGE_TAG}" || true

            # Faz o deploy em Swarm com auth para os nós conseguirem puxar a imagem
            docker stack deploy --with-registry-auth -c docker-compose.yml grdmad

            # Limpeza
            docker image prune -f || true
            docker builder prune -f || true
